/* Generated By:JavaCC: Do not edit this line. Yaka.java */
        public class Yaka implements YakaConstants {

                // Choix de l'interpreteur a utiliser
                public static String interpreterType = "YVMasm"; // YVM ou YVMasm

                // Interpreteur
                public static YVM Interpreter;

                // Pour se souvenir s'il y a déjà eu une erreur
                public static boolean error = false;


                // Main : point d'entree pour le compilateur
                public static void main(String args[]) {

                        Yaka analyzer;
                        java.io.InputStream input;
                        String inputFilename = "";

                        Writer.print("\u005cn"); // Juste pour un affichage plus claire

                        // Recuperation du texte/script a traiter
                        if(args.length == 1) {
                                try {
                                        String pathToFile = args[0];
                                        String[] explodePath = pathToFile.split("/");

                                        inputFilename = explodePath[explodePath.length - 1];

                                        // On récupère le contenu du fichier
                                        input = new java.io.FileInputStream(pathToFile+".yaka");
                                }
                                catch (java.io.FileNotFoundException e) {
                                        error = true;
                                        Writer.errorln("Fichier introuvable !\u005cn");
                                        return;
                                }
                        }
                        else if (args.length == 0) {
                                Writer.println("Lecture sur l'entree standard...\u005cn");

                                inputFilename = "out";

                                // On récupère le contenu de la console
                                input = System.in;
                        }
                        else {
                                Writer.errorln("Usage: java Gram [fichier]\u005cn");
                                return;
                        }

                        // Declaration de l'interpreteur
                        if(interpreterType.equals("YVM")) {
                                Interpreter = new YVM(inputFilename);
                        }
                        else if(interpreterType.equals("YVMasm")) {
                                Interpreter = new YVMasm(inputFilename);
                        }

                        // Analyse
                        try {

                                analyzer = new Yaka(input);
                                analyzer.analyse();

                                if(!error) {

                                        Writer.println("Analyse Syntaxique terminee !\u005cn");

                                        // On affiche le resultat du tableau d'ident
                                        //Writer.println(IdentArray.string());

                                        // On affiche le resultat du tableau d'expression
                                        //Writer.println(Expression.string());

                                        // On créer le script YVM
                                        Interpreter.outputSave();
                                }

                        }
                        catch(ParseException e) {
                                MyError.report("Erreur inconnue", e);
                        }
                }

/**
 * ===============================================================
 * =================== *** __ Grammaire __ *** ===================
 * ===============================================================
 */
  static final public void analyse() throws ParseException {
    jj_consume_token(PROGRAMME);
                Yaka.Interpreter.entete();
    jj_consume_token(ident);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEEN:
      case ENTIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declFonction();
    }
    jj_consume_token(PRINCIPAL);
                Yaka.Interpreter.label("main");
    bloc();
    jj_consume_token(FPRINCIPAL);
    jj_consume_token(FPROGRAMME);
                Yaka.Interpreter.queue();
  }

  static final public void bloc() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      declConst();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      declVar();
    }
                // Todo : On utilise plus jamais ouvrePrinc ?
                //Yaka.Interpreter.ouvrePrinc(IdentArray.nbVar());
                Yaka.Interpreter.ouvreBloc(IdentArray.nbVar());
    suiteInstr();

  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTIER:
      jj_consume_token(ENTIER);
                IdentArray.lastType = ENTIER;
      break;
    case BOOLEEN:
      jj_consume_token(BOOLEEN);
                IdentArray.lastType = BOOLEEN;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * ====================================================
 * =================== Déclarations ===================
 * ====================================================
 */

// CONST type constante, constante, ...;
  static final public void declConst() throws ParseException {
    jj_consume_token(CONST);
    defConst();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(51);
      defConst();
    }
    jj_consume_token(52);
  }

  static final public void defConst() throws ParseException {
    jj_consume_token(ident);
                        IdentArray.lastIdent = YakaTokenManager.identLu;
    jj_consume_token(EGAL);
    valConst();
                IdentArray.addLocal(IdentArray.lastIdent, new IdConst(IdentArray.lastValue, IdentArray.lastType));
  }

  static final public void valConst() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entier:
      jj_consume_token(entier);
                IdentArray.lastValue = YakaTokenManager.entierLu;
                IdentArray.lastType = ENTIER;
      break;
    case ident:
      jj_consume_token(ident);
                try {
                        IdConst id = (IdConst) IdentArray.getLocal(YakaTokenManager.identLu);

                        if(id == null)
                                {if (true) throw new ParseException("Identifiant \u005c""+YakaTokenManager.identLu+"\u005c" non declare");}

                        IdentArray.lastValue = id.value;
                        IdentArray.lastType = id.type;
                }
                catch(ParseException e) {
                        MyError.report("Erreur lexicale", e);
                }
      break;
    case VRAI:
      jj_consume_token(VRAI);
                IdentArray.lastValue = Yaka.Interpreter.TRUE;
                IdentArray.lastType = BOOLEEN;
      break;
    case FAUX:
      jj_consume_token(FAUX);
                IdentArray.lastValue = Yaka.Interpreter.FALSE;
                IdentArray.lastType = BOOLEEN;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// VAR type variable, variable, ...;
  static final public void declVar() throws ParseException {
    jj_consume_token(VAR);
    type();
    jj_consume_token(ident);
                IdentArray.shiftOffsetVar();
                IdentArray.addLocal(
                        YakaTokenManager.identLu,
                        new IdVar(IdentArray.offsetVar, IdentArray.lastType)
                );
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(51);
      jj_consume_token(ident);
                        IdentArray.shiftOffsetVar();
                        IdentArray.addLocal(
                                YakaTokenManager.identLu,
                                new IdVar(IdentArray.offsetVar, IdentArray.lastType)
                        );
    }
    jj_consume_token(52);
  }

// type FONCTION fonction(type variable, type variable, ...)
//     bloc
//     RETOURNE (variable | expression)
// FFONCTION
  static final public void declFonction() throws ParseException {
    type();
    jj_consume_token(FONCTION);
    jj_consume_token(ident);
                IdentArray.currentNameFunction = YakaTokenManager.identLu;
                IdentArray.addGlobal(
                        IdentArray.currentNameFunction,
                        new IdFunction(IdentArray.lastType)
                );
                Yaka.Interpreter.label(IdentArray.currentNameFunction);
    paramForms();
    bloc();
    jj_consume_token(FFONCTION);
                IdentArray.sortParams(IdentArray.currentNameFunction);
                IdentArray.initOffsetParam();
                IdentArray.cleanLocaux();
                IdentArray.initOffsetVar();
  }

  static final public void paramForms() throws ParseException {
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEEN:
    case ENTIER:
      paramForm();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(51);
        paramForm();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(54);
  }

  static final public void paramForm() throws ParseException {
    type();
    jj_consume_token(ident);
                IdentArray.shiftOffsetParam();
                IdentArray.addParam(
                        IdentArray.currentNameFunction,
                        YakaTokenManager.identLu,
                        new IdVar(IdentArray.offsetParam, IdentArray.lastType)
                );
  }

/**
 * ====================================================
 * =================== Instructions ===================
 * ====================================================
 */
  static final public void suiteInstr() throws ParseException {
    instruction();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SI:
      case RETOURNE:
      case TANTQUE:
      case ECRIRE:
      case LIRE:
      case ALALIGNE:
      case ident:
        instruction();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
  }

  static final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      affectation();
      break;
    case LIRE:
      lecture();
      break;
    case ECRIRE:
    case ALALIGNE:
      ecriture();
      break;
    case TANTQUE:
      boucle();
      break;
    case SI:
      conditionnel();
      break;
    case RETOURNE:
      retourne();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// variable = (expression | variable | constante)
  static final public void affectation() throws ParseException {
    jj_consume_token(ident);
                Ident affectId = IdentArray.getLocal(YakaTokenManager.identLu);
                try {
                        if(affectId.isConst())
                                {if (true) throw new ParseException("Affectation impossible sur une constante");}
                }
                catch(ParseException e) {
                        MyError.report("Erreur d'affectation", e);
                }
    jj_consume_token(EGAL);
    expression();
                Yaka.Interpreter.affect(affectId);
  }

// LIRE(variable)
  static final public void lecture() throws ParseException {
    jj_consume_token(LIRE);
    jj_consume_token(53);
    jj_consume_token(ident);
    jj_consume_token(54);
                try {
                        Ident id = IdentArray.getLocal(YakaTokenManager.identLu);
                        if(id.isVar()) {
                                Yaka.Interpreter.lireEnt(id);
                        }
                        else {
                                {if (true) throw new ParseException("Affectation impossible sur une constante");}
                        }
                }
                catch(ParseException e) {
                        MyError.report("Erreur de lecture", e);
                }
  }

// ECRIRE(chaine)
  static final public void ecriture() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ECRIRE:
      jj_consume_token(ECRIRE);
      jj_consume_token(53);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOINS:
      case NON:
      case VRAI:
      case FAUX:
      case entier:
      case ident:
      case 53:
        expression();
                        Yaka.Interpreter.ecrireEnt();
        break;
      case chaine:
        jj_consume_token(chaine);
                        Yaka.Interpreter.ecrireChaine(YakaTokenManager.chaineLue);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      break;
    case ALALIGNE:
      jj_consume_token(ALALIGNE);
                Yaka.Interpreter.aLaLigne();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// TANTQUE condition FAIRE
//     instructions
// FAIT
  static final public void boucle() throws ParseException {
                // Génération des étiquettes de saut avec incrémentation du numéro
                String faire = Label.get(FAIRE);
                String fait = Label.get(FAIT);
    jj_consume_token(TANTQUE);
                // Ajout de l'étiquette de début de boucle
                Yaka.Interpreter.label(faire);
    expression();
                try {
                        int type = Expression.popType();

                        // Vérification du type (booléen) de l'expression
                        if(type != BOOLEEN)
                                {if (true) throw new ParseException("Expression non bool\u00e9enne ("+type+" trouv\u00e9)");}

                        // Si expression fausse, on sort de la boucle
                        Yaka.Interpreter.iffaux(fait);
                }
                catch(ParseException e) {
                        MyError.report("Erreur d'iteration", e);
                }
    jj_consume_token(FAIRE);
    suiteInstr();
                // Saut sur l'étiquette de début de boucle
                Yaka.Interpreter.jump(faire);
    jj_consume_token(FAIT);
                // Ajout de l'étiquette de fin de boucle
                Yaka.Interpreter.label(fait);
  }

// SI condition ALORS
//     instructions
// SINON
//     instructions
// FSI
  static final public void conditionnel() throws ParseException {
                // Génération des étiquettes de saut avec incrémentation du numéro
                String sinon = Label.get(SINON);
                String fsi = Label.get(FSI);
    jj_consume_token(SI);
    expression();
                try {
                        int type = Expression.popType();

                        // Vérification du type (booléen) de l'expression
                        if(type != BOOLEEN)
                                {if (true) throw new ParseException("Expression non bool\u00e9enne ("+type+" trouv\u00e9)");}

                        // Si expression fausse, on passe au bloc "sinon" de la conditionnel
                        Yaka.Interpreter.iffaux(sinon);
                }
                catch(ParseException e) {
                        MyError.report("Erreur de condition", e);
                }
    jj_consume_token(ALORS);
    suiteInstr();
                // Saut en fin de conditionnel (pour ne pas exécuter les instructions "sinon")
                Yaka.Interpreter.jump(fsi);

                // Ajout de l'étiquette du début de bloc "sinon" de la conditionnel
                Yaka.Interpreter.label(sinon);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINON:
      jj_consume_token(SINON);
      suiteInstr();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FSI);
                // Ajout de l'étiquette de fin de conditionnel
                Yaka.Interpreter.label(fsi);
  }

// variable = fonction(variable, variable, ...)
  static final public void retourne() throws ParseException {
    jj_consume_token(RETOURNE);
    expression();
                Yaka.Interpreter.ireturn(IdentArray.getGlobal(IdentArray.currentNameFunction).nbParams() + 4);
  }

/**
 * ===================================================
 * =================== Expressions ===================
 * ===================================================
 */
  static final public void expression() throws ParseException {
    simpleExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INF:
    case SUP:
    case INFEGAL:
    case SUPEGAL:
    case EGAL:
    case DIFF:
      opRel();
      simpleExpr();
                        Expression.dualUnstack();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void simpleExpr() throws ParseException {
    terme();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MOINS:
      case OU:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      opAdd();
      terme();
                        Expression.dualUnstack();
    }
  }

  static final public void terme() throws ParseException {
    facteur();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case ET:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      opMul();
      facteur();
                        Expression.dualUnstack();
    }
  }

  static final public void facteur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VRAI:
    case FAUX:
    case entier:
    case ident:
    case 53:
      primaire();
      break;
    case MOINS:
    case NON:
      opNeg();
      primaire();
                        Expression.singleUnstack();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaire() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VRAI:
    case FAUX:
    case entier:
    case ident:
      valeur();
      break;
    case 53:
      jj_consume_token(53);
      expression();
      jj_consume_token(54);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void valeur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entier:
      jj_consume_token(entier);
                Expression.addType(ENTIER);
                Yaka.Interpreter.iconst(YakaTokenManager.entierLu);
      break;
    case ident:
      jj_consume_token(ident);
                try {

                        // On récupère d'abord l'ident dans le bloc local
                        Ident id = IdentArray.getLocal(YakaTokenManager.identLu);

                        // Sinon on le récupère dans la fonction locale
                        if(id == null) {
                                id = IdentArray.getGlobal(IdentArray.currentNameFunction).getParam(YakaTokenManager.identLu);

                                // Sinon on le récupère dans le bloc global
                                if(id == null) {
                                        id = IdentArray.getGlobal(YakaTokenManager.identLu);

                                        // Si l'ident est trouvé dans le bloc global alors il devient la fonction locale courrante
                                        if(id != null) {
                                                IdentArray.currentNameFunction = YakaTokenManager.identLu;
                                        }
                                }
                        }

                        // Si l'ident est toujours introuvable => Erreur
                        if(id == null) {
                                Expression.addType(ERROR);
                                {if (true) throw new ParseException("Identifiant \u005c""+YakaTokenManager.identLu+"\u005c" non declare");}
                        }

                        Expression.addType(id.getType());

                        if(id.isVar())
                                Yaka.Interpreter.iload(id.getValue());

                        else if(id.isConst())
                                Yaka.Interpreter.iconst(id.getValue());

                        else if(id.isFunction())
                                Yaka.Interpreter.reserveRetour();

                }
                catch(ParseException e) {
                        MyError.report("Erreur lexicale", e);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        argumentsFonction();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
                                Yaka.Interpreter.call(IdentArray.currentNameFunction);
      break;
    case VRAI:
      jj_consume_token(VRAI);
                Expression.addType(BOOLEEN);
                Yaka.Interpreter.iconst(Yaka.Interpreter.TRUE);
      break;
    case FAUX:
      jj_consume_token(FAUX);
                Expression.addType(BOOLEEN);
                Yaka.Interpreter.iconst(Yaka.Interpreter.FALSE);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opRel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EGAL:
      jj_consume_token(EGAL);
                Expression.addOperator(EGAL);
      break;
    case DIFF:
      jj_consume_token(DIFF);
                Expression.addOperator(DIFF);
      break;
    case INF:
      jj_consume_token(INF);
                Expression.addOperator(INF);
      break;
    case INFEGAL:
      jj_consume_token(INFEGAL);
                Expression.addOperator(INFEGAL);
      break;
    case SUP:
      jj_consume_token(SUP);
                Expression.addOperator(SUP);
      break;
    case SUPEGAL:
      jj_consume_token(SUPEGAL);
                Expression.addOperator(SUPEGAL);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opAdd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                Expression.addOperator(PLUS);
      break;
    case MOINS:
      jj_consume_token(MOINS);
                Expression.addOperator(MOINS);
      break;
    case OU:
      jj_consume_token(OU);
                Expression.addOperator(OU);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opMul() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
                Expression.addOperator(MUL);
      break;
    case DIV:
      jj_consume_token(DIV);
                Expression.addOperator(DIV);
      break;
    case ET:
      jj_consume_token(ET);
                Expression.addOperator(ET);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opNeg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOINS:
      jj_consume_token(MOINS);
                Expression.addOperator(MOINS);
      break;
    case NON:
      jj_consume_token(NON);
                Expression.addOperator(NON);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void argumentsFonction() throws ParseException {
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOINS:
    case NON:
    case VRAI:
    case FAUX:
    case entier:
    case ident:
    case 53:
      expression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        jj_consume_token(51);
        expression();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(54);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public YakaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20400000,0x0,0x800000,0x20400000,0x0,0x80000000,0x0,0x0,0x20400000,0x0,0x48000000,0x48000000,0x80100200,0x0,0x2000000,0x3f000,0x80300,0x40c00,0x80100200,0x80000000,0x0,0x80000000,0x3f000,0x80300,0x40c00,0x100200,0x0,0x80100200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x0,0x0,0x80000,0x30004,0x80000,0x80000,0x0,0x100000,0x23801,0x23801,0x270004,0x2800,0x0,0x0,0x0,0x0,0x230004,0x230004,0x200000,0x30004,0x0,0x0,0x0,0x0,0x80000,0x230004,};
   }

  /** Constructor with InputStream. */
  public Yaka(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yaka(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YakaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Yaka(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YakaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Yaka(YakaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(YakaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }
