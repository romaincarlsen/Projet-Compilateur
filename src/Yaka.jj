/**
 *  Auteur: Pedrono Marie-Jo
 *
 * 	creation : 13 fevrier 2002
 *
 *  Nature : Projet Etudiant
 *
 */

options {
	JDK_VERSION = "1.7";
}

PARSER_BEGIN(Yaka)
	import java.util.*;
	public class Yaka {

		// Choix de l'interpreteur a utiliser
		public static String interpreterType = "YVMasm"; // YVM ou YVMasm

		// Interpreteur
		public static YVM Interpreter;

		// Pour se souvenir s'il y a déjà eu une erreur
		public static boolean error = false;


		// Main : point d'entree pour le compilateur
		public static void main(String args[]) {

			Yaka analyzer;
			java.io.InputStream input;
			String inputFilename = "";

			Writer.print("\n"); // Juste pour un affichage plus claire

			// Recuperation du texte/script a traiter
			if(args.length == 1) {
				try {
					String pathToFile = args[0];
					String[] explodePath = pathToFile.split("/");

					inputFilename = explodePath[explodePath.length - 1];

					// On récupère le contenu du fichier
					input = new java.io.FileInputStream(pathToFile+".yaka");
				}
				catch (java.io.FileNotFoundException e) {
					error = true;
					Writer.errorln("Fichier introuvable !\n");
					return;
				}
			}
			else if (args.length == 0) {
				Writer.println("Lecture sur l'entree standard...\n");

				inputFilename = "out";

				// On récupère le contenu de la console
				input = System.in;
			}
			else {
				Writer.errorln("Usage: java Gram [fichier]\n");
				return;
			}

			// Declaration de l'interpreteur
			if(interpreterType.equals("YVM")) {
				Interpreter = new YVM(inputFilename);
			}
			else if(interpreterType.equals("YVMasm")) {
				Interpreter = new YVMasm(inputFilename);
			}

			// Analyse
			try {

				analyzer = new Yaka(input);
				analyzer.analyse();

				if(!error) {

					Writer.println("Analyse Syntaxique terminee !\n");

					// On affiche le resultat du tableau d'ident
					//Writer.println(IdentArray.string());

					// On affiche le resultat du tableau d'expression
					//Writer.println(Expression.string());

					// On créer le script YVM
					Interpreter.outputSave();
				}

			}
			catch(ParseException e) {
				MyError.report("Erreur inconnue", e);
			}
		}

	}

PARSER_END(Yaka)



/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS : {
	public static String identLu, chaineLue;
	public static int entierLu;
	public static int currentLine = 1;
}


/*** Skip whitespace and comments ***/
SKIP : {
	  " "
	| "\t"
	| "\n" {YakaTokenManager.currentLine++;}
	| "\r"
	| "(*" : IN_COMMENT
}

<IN_COMMENT> MORE: {
	< ~[] >
}

<IN_COMMENT> SKIP: {
	< "*)" > {SwitchTo(DEFAULT);}
}


/*** Mots reserves ***/
TOKEN : {
	  <PLUS : "+">
	| <MOINS : "-">
	| <MUL : "*">
	| <DIV : "/">
	| <INF : "<">
	| <SUP : ">">
	| <INFEGAL : "<=">
	| <SUPEGAL : ">=">
	| <EGAL : "=">
	| <DIFF : "<>">
	| <ET : "ET">
	| <OU : "OU">
	| <NON : "NON">
	| <ERROR : "error">
	| < BOOLEEN: "BOOLEEN" >
	| < VAR: "VAR" >
	| < FAIRE: "FAIRE" >
	| < SINON: "SINON" >
	| < POUR: "POUR" >
	| < SI: "SI" >
	| < FSI: "FSI">
	| < ENTIER: "ENTIER" >
	| < RETOURNE: "RETOURNE" >
	| < VRAI: "VRAI" >
	| < TANTQUE: "TANTQUE" >
	| <CONST : "CONST">
	| <FAUX : "FAUX">
	| <FAIT : "FAIT">
	| <FONCTION : "FONCTION">
	| <FFONCTION  : "FFONCTION">
	| <PROGRAMME : "PROGRAMME" >
	| <FPROGRAMME: "FPROGRAMME" >
	| <PRINCIPAL : "PRINCIPAL">
	| <FPRINCIPAL : "FPRINCIPAL">
	| <ALORS : "ALORS">
	| <ECRIRE : "ECRIRE">
	| <LIRE : "LIRE">
	| <ALALIGNE : "ALALIGNE">
}


/*** unites de base nombres, idents,  strings ***/
TOKEN  : {
	  < #chiffre : ["0"-"9"] >

	| < #lettre: ["A"-"Z","a"-"z"] >

	| < entier : (<chiffre>)+ > {
		entierLu = Integer.parseInt(image.toString());
	}

	| < ident : <lettre> (<lettre> | <chiffre>)* > {
		identLu = image.toString();
	}

	| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" > {
		chaineLue = image.toString();
	}
}







/**
 * ===============================================================
 * =================== *** __ Grammaire __ *** ===================
 * ===============================================================
 */

void analyse() : {} {
	<PROGRAMME> {
		Yaka.Interpreter.entete();
	}
	<ident>
	(declFonction())*
	<PRINCIPAL>	{
		Yaka.Interpreter.main();
	}
	bloc()
	<FPRINCIPAL>
	<FPROGRAMME> {
		Yaka.Interpreter.queue();
	}
}


void bloc() : {} {
	(declConst())*
	(declVar())* {
		Yaka.Interpreter.ouvreBloc(IdentArray.nbVar());
	}
	suiteInstr() {
		if (IdentArray.currentDeclFunction != null)
			Yaka.Interpreter.fermeBloc(IdentArray.getGlobal(IdentArray.currentDeclFunction).nbParams());
	}
}


void type() : {} {
	(<ENTIER>) {
	  	IdentArray.lastType = ENTIER;
	}

	| (<BOOLEEN>) {
		IdentArray.lastType = BOOLEEN;
	}
}






/**
 * ====================================================
 * =================== Déclarations ===================
 * ====================================================
 */

// CONST type constante, constante, ...;
void declConst() : {} {
	<CONST>
	defConst()
	( "," defConst() )*
	";"
}


void defConst() : {} {
	(
		(<ident>) {
			IdentArray.lastIdent = YakaTokenManager.identLu;
		}

		<EGAL> valConst()
	) {
		IdentArray.addLocal(IdentArray.lastIdent, new IdConst(IdentArray.lastValue, IdentArray.lastType));
	}
}


void valConst() : {} {
	(<entier>) {
		IdentArray.lastValue = YakaTokenManager.entierLu;
		IdentArray.lastType = ENTIER;
	}

	| (<ident>) {
		try {
			IdConst id = (IdConst) IdentArray.getLocal(YakaTokenManager.identLu);

			if(id == null)
				throw new ParseException("Identifiant \""+YakaTokenManager.identLu+"\" non declare");

			IdentArray.lastValue = id.value;
			IdentArray.lastType = id.type;
		}
		catch(ParseException e) {
			MyError.report("Erreur lexicale", e);
		}

 	}

	| (<VRAI>) {
		IdentArray.lastValue = Yaka.Interpreter.TRUE;
		IdentArray.lastType = BOOLEEN;
	}

	| (<FAUX>) {
		IdentArray.lastValue = Yaka.Interpreter.FALSE;
		IdentArray.lastType = BOOLEEN;
	}

}


// VAR type variable, variable, ...;
void declVar() : {} {
	<VAR> type()
	(<ident>) {
		IdentArray.shiftOffsetVar();
		IdentArray.addLocal(
			YakaTokenManager.identLu,
			new IdVar(IdentArray.offsetVar, IdentArray.lastType)
		);
	}
	(
		","
		(<ident>) {
			IdentArray.shiftOffsetVar();
			IdentArray.addLocal(
				YakaTokenManager.identLu,
				new IdVar(IdentArray.offsetVar, IdentArray.lastType)
			);
		}
	)*
	";"
}


// type FONCTION fonction(type variable, type variable, ...)
//     bloc
//     RETOURNE (variable | expression)
// FFONCTION
void declFonction() : {} {
	// Todo : vérifier que la valeur de retour correspondent et que la déclaration de fonction soit unique
	// Les variables déclarées dans la fonction ne doivent pas être accessible depuis l'extérieur
	// (les détruires ou bien préciser à quel programme elles appartiennent)
	type()
	<FONCTION>
	<ident> {
		IdentArray.currentDeclFunction = YakaTokenManager.identLu ;
		IdentArray.addGlobal(
			IdentArray.currentDeclFunction,
			new IdFunction(IdentArray.lastType)
		);
		Yaka.Interpreter.label(IdentArray.currentDeclFunction);
	}
	paramForms() 	{
			IdentArray.sortParams(IdentArray.currentDeclFunction);
			}
	bloc()
	<FFONCTION>	{
		
		IdentArray.initOffsetParam();
		IdentArray.cleanLocaux();
		IdentArray.initOffsetVar();
		IdentArray.currentDeclFunction = null ;
	}
}

void paramForms() : {} {
	"("
		(
			paramForm()
			( "," paramForm() )*
		)?
	")"
}

void paramForm():{} {
	type() <ident> {
		IdentArray.shiftOffsetParam();
		IdentArray.addParam(
			IdentArray.currentDeclFunction,
			YakaTokenManager.identLu,
			new IdVar(IdentArray.offsetParam, IdentArray.lastType)
		);
	}
}



/**
 * ====================================================
 * =================== Instructions ===================
 * ====================================================
 */

void suiteInstr() : {} {
	instruction()
	( ";" (instruction())? )*
}


void instruction() : {} {
	lecture()|
	ecriture()|
	affectation() |
	boucle()|
	conditionnel()|
	retourne()
}


// variable = (expression | variable | constante)
void affectation() : {} {
	(<ident>) {

		Ident affectId = IdentArray.getLocal(YakaTokenManager.identLu);
		try {
			if(affectId.isConst())
				throw new ParseException("Affectation impossible sur une constante");
		}
		catch(ParseException e) {
			MyError.report("Erreur d'affectation", e);
		}

	}
	(<EGAL> (expression()) ) {
		Yaka.Interpreter.affect(affectId);
	}
}


// LIRE(variable)
void lecture() : {} {
	(<LIRE>"("<ident>")") {
		try {
			Ident id = IdentArray.getLocal(YakaTokenManager.identLu);
			if(id.isVar()) {
				Yaka.Interpreter.lireEnt(id);
			}
			else {
				throw new ParseException("Affectation impossible sur une constante");
			}
		}
		catch(ParseException e) {
			MyError.report("Erreur de lecture", e);
		}
	}
}


// ECRIRE(chaine)
void ecriture() : {} {

	(<ECRIRE>"("

		(expression() {
			Yaka.Interpreter.ecrireEnt();
		}
		| <chaine> {
			Yaka.Interpreter.ecrireChaine(YakaTokenManager.chaineLue);
		})

	")")

	| (<ALALIGNE>) {
		Yaka.Interpreter.aLaLigne();
	}
}


// TANTQUE condition FAIRE
//     instructions
// FAIT
void boucle() : {} {
	{
		// Génération des étiquettes de saut avec incrémentation du numéro
		String faire = Label.get(FAIRE);
		String fait = Label.get(FAIT);
	}
	<TANTQUE> {
		// Ajout de l'étiquette de début de boucle
		Yaka.Interpreter.label(faire);
	}
	expression() {
		try {
			int type = Expression.popType();

			// Vérification du type (booléen) de l'expression
			if(type != BOOLEEN)
				throw new ParseException("Expression non booléenne ("+type+" trouvé)");

			// Si expression fausse, on sort de la boucle
			Yaka.Interpreter.iffaux(fait);
		}
		catch(ParseException e) {
			MyError.report("Erreur d'iteration", e);
		}
	}
	<FAIRE>
	suiteInstr() {
		// Saut sur l'étiquette de début de boucle
		Yaka.Interpreter.jump(faire);
	}
	<FAIT> {
		// Ajout de l'étiquette de fin de boucle
		Yaka.Interpreter.label(fait);
	}
}


// SI condition ALORS
//     instructions
// SINON
//     instructions
// FSI
void conditionnel() : {} {
	{
		// Génération des étiquettes de saut avec incrémentation du numéro
		String sinon = Label.get(SINON);
		String fsi = Label.get(FSI);
	}
	<SI>
	expression() {
		try {
			int type = Expression.popType();

			// Vérification du type (booléen) de l'expression
			if(type != BOOLEEN)
				throw new ParseException("Expression non booléenne ("+type+" trouvé)");

			// Si expression fausse, on passe au bloc "sinon" de la conditionnel
			Yaka.Interpreter.iffaux(sinon);
		}
		catch(ParseException e) {
			MyError.report("Erreur de condition", e);
		}
	}
	<ALORS>
	suiteInstr() {
		// Saut en fin de conditionnel (pour ne pas exécuter les instructions "sinon")
		Yaka.Interpreter.jump(fsi);

		// Ajout de l'étiquette du début de bloc "sinon" de la conditionnel
		Yaka.Interpreter.label(sinon);
	}
	(
		<SINON>
		suiteInstr()
	) ?
	<FSI> {
		// Ajout de l'étiquette de fin de conditionnel
		Yaka.Interpreter.label(fsi);
	}
}


// variable = fonction(variable, variable, ...)
void retourne() : {} {
	// Todo : vérifier que le type de ce qui est retourné concorde avec le type lors de la déclaration
	<RETOURNE> expression() {	try {
						int t = Expression.popType() ;
						int t_f = IdentArray.getGlobal(IdentArray.currentDeclFunction).getType() ;
						if (t == t_f)
							Yaka.Interpreter.ireturn(IdentArray.getGlobal(IdentArray.currentDeclFunction).nbParams() + 4);
						else
							throw new ParseException("type de retour invalide : trouvé : " + tokenImage[t] + " - attendu : " + tokenImage[t_f]);
					}
					catch(ParseException e) {
						MyError.report("Erreur de type", e);
					}
						
	}
}






/**
 * ===================================================
 * =================== Expressions ===================
 * ===================================================
 */

void expression() : {} {

	simpleExpr()
	(
		opRel()
		simpleExpr() {
			Expression.dualUnstack();
		}
	)?

}


void simpleExpr() : {} {

	terme()
	(
		opAdd()
		terme() {
			Expression.dualUnstack();
		}
	)*

}


void terme() : {} {

	facteur()
	(
		opMul()
		facteur() {
			Expression.dualUnstack();
		}
	)*

}

void facteur() : {} {

	primaire()
	| opNeg() primaire() {
			Expression.singleUnstack();
	}
}


void primaire() : {} {
	valeur()
	| "(" expression() ")"
}


void valeur() : {} {
	(<entier> {
		Expression.addType(ENTIER);
		Yaka.Interpreter.iconst(YakaTokenManager.entierLu);
	}

	| (<ident>  {
		try {
			// On récupère d'abord l'ident dans le bloc local
			Ident id = IdentArray.getLocal(YakaTokenManager.identLu);

			// Sinon on le récupère dans la fonction locale
			if(id == null) {
				Ident fct = IdentArray.getGlobal(IdentArray.currentDeclFunction) ;
				if (fct!=null)
					id = fct.getParam(YakaTokenManager.identLu);

				// Sinon on le récupère dans le bloc global
				if(id == null) {
					id = IdentArray.getGlobal(YakaTokenManager.identLu);

					// Si l'ident est trouvé dans le bloc global alors il devient la fonction locale courrante
					if(id != null) {
						IdentArray.functionStack.push(YakaTokenManager.identLu);
					}
				}
			}

			// Si l'ident est toujours introuvable => Erreur
			if(id == null) {
				Expression.addType(ERROR);
				throw new ParseException("Identifiant \""+YakaTokenManager.identLu+"\" non declare");
			}

			Expression.addType(id.getType());

			if(id.isVar())
				Yaka.Interpreter.iload(id.getValue());
			else {
				if(id.isConst())
					Yaka.Interpreter.iconst(id.getValue());
				else {
					if(id.isFunction())
						Yaka.Interpreter.reserveRetour();
				}
			}

		}
		catch(ParseException e) {
			MyError.report("Erreur lexicale", e);
		}
	}
	(argumentsFonction())?)

	| <VRAI> 	{
		Expression.addType(BOOLEEN);
		Yaka.Interpreter.iconst(Yaka.Interpreter.TRUE);
	}

	| <FAUX> 	{
		Expression.addType(BOOLEEN);
		Yaka.Interpreter.iconst(Yaka.Interpreter.FALSE);
	})

}


void opRel() : {} {
	<EGAL> {
		Expression.addOperator(EGAL);
	}

	| <DIFF> {
		Expression.addOperator(DIFF);
	}

	| <INF>	{
		Expression.addOperator(INF);
	}

	| <INFEGAL>	{
		Expression.addOperator(INFEGAL);
	}

	| <SUP> {
		Expression.addOperator(SUP);
	}

	| <SUPEGAL>	{
		Expression.addOperator(SUPEGAL);
	}
}


void opAdd() : {} {
	<PLUS> {
		Expression.addOperator(PLUS);
	}

	| <MOINS> {
		Expression.addOperator(MOINS);
	}

	| <OU> {
		Expression.addOperator(OU);
	}
}


void opMul() : {} {
	<MUL> {
		Expression.addOperator(MUL);
	}

	| <DIV> {
		Expression.addOperator(DIV);
	}

	| <ET> {
		Expression.addOperator(ET);
	}
}


void opNeg() : {} {
	<MOINS> {
		Expression.addOperator(MOINS);
	}

	| <NON> {
		Expression.addOperator(NON);
	}
}

void argumentsFonction(): {} {
	"(" (expression() (","expression())* )? 	{
							Yaka.Interpreter.call(IdentArray.functionStack.pop()) ;
							}
	")" 
}
